#!/bin/bash
# shellcheck disable=SC1090
# ssh-agent
# first shamelessly adapted (plagiarized) from some stack exchange thread
# (though I have now added enough of my own stuff to this that I hardly think
# that is still true)

source_pragma_once "$JP_DOTFILES_BASHRC_D"/env

SSH_HOME="${SSH_HOME:-"$HOME"/.ssh}"
SSH_ENV="${SSH_ENV:-${SSH_HOME}/agent-setup}"
SSH_ENV_LOCK="${SSH_ENV_LOCK:-/tmp/ssh-agent-setup-lock}"

# tries to start the ssh agent, using the atomicity of mkdir to guard
# against race conditions and ensure there is only one agent running.
# If it succeeds in creating the directory, it won the race and so
# creates an SSH agent. It leaves the directory open to prevent other
# processes from creating an agent simultaneously.
# If it fails to acquire the lock by creating the lock directory, it
# waits SSH_ENV_WAIT seconds (default 1), then attempts to use the SSH
# agent created by the other process.
# If this fails, it may mean SSH_ENV_WAIT is too short.
# Another more troubling possibility is that there was no competing
# process creating an SSH agent at all. This should only happen if:
#
# 1. SSH_ENV_LOCK survives a reboot (unlikely since it is in /tmp);
# 2. the agent has died; or
# 3. the agent exists but the SSH_ENV file pointing to it has been
# removed.
#
# We purposefully ask the user to resolve this situation.
# In case of 1 or 2, the lock should be released by rmdir-ing
# SSH_ENV_LOCK, then this function should be run again. If 3 happens,
# you can also do the above; ideally (but optionally), you should
# kill the "rogue" agent first.
function maybe-start-agent {
  if check-env-file ; then
    return
  fi
  if mkdir "$SSH_ENV_LOCK" >/dev/null 2>&1 ; then
    echo "Initialising new SSH agent..."
    ssh-agent > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}"
    add-local-keys
  else
    echo 'avoided a ssh-agent race condition! trying again in a moment'
    sleep "${SSH_ENV_WAIT:-1}"
    if ! check-env-file ; then
      cat <<-END_OF_MESSAGE >&2
	------------------OH NO!---------------------------
	This has proven complicated. Please kill any existing ssh-agents
	and execute the following:

	$ rmdir $SSH_ENV_LOCK ; ${FUNCNAME[0]}

	Then you should execute check-env-file in all sessions.

	See comments in ${BASH_SOURCE[0]} for more about what has happened.
	END_OF_MESSAGE
      return 1
    fi
  fi
}

function add-local-keys() {
  local pub key
  for pub in "$SSH_HOME"/*.pub ; do
    key="${pub%.pub}"  # shave off the suffix
    if [[ -r "$key" ]] ; then
      ssh-add "$key"
    fi
  done
}

function check-env-file() {
  if [[ ! -f "${SSH_ENV}" ]] ; then
    return 1
  fi
  source "${SSH_ENV}"
  echo checking for ssh-agent pid "$SSH_AGENT_PID"
  # ps ${SSH_AGENT_PID} doesn't work under cywgin
  # shellcheck disable=SC2009  # because we are okay grepping ps output here
  if ps ${CYGWIN:+-p} "${SSH_AGENT_PID}" | grep -qm1 ssh-agent$ ; then
    echo "previous ssh-agent ${SSH_AGENT_PID} is still running"
  else
    echo "no ssh-agent found"
    return 1
  fi
}

# Source SSH settings, if applicable

maybe-start-agent
