#!/bin/bash
# shellcheck disable=SC1090

function c(){
  local DIR="$1"
  shift
  if [[ ! -d "$DIR" ]] ; then
    mkdir -pv "$DIR" >&2
    local RESULT=$?
    [[ $RESULT == 0 ]] || return $RESULT
  fi
  echo "$DIR" >&2
  if [[ -z "$*" ]] ; then
    cd "$DIR" || return 1  # make shellcheck happy; this should never happen
  else
    ( cd "$DIR" && "$@" )
  fi
}

function code() {
  if [[ $# == 0 ]] ; then
    if [[ -L .main ]] ; then
      "${EDITOR:-vi}" "$(readlink .main)"
      return $?
    elif [[ -d ~/code/"${PASSARO_CODE_LOC}" ]] ; then
      c ~/code/"${PASSARO_CODE_LOC}"
      [[ ! -d .git ]] || git status
      return 0
    fi
    return 1
  fi
  local suff="$1"
  local folders=(~/code/*"$suff")
  local numf="${#folders[@]}"
  case "$numf" in
    1) ;;
    *)
        echo >&2 "$numf" folders found for "*$suff", please be more specific:
        for folder in "${folders[@]}" ; do
           printf >&2 '\t%s\n' "$folder"
        done
        return 2 ;;
  esac
  for folder in "${folders[@]}" ; do
    if [[ -d "$folder" ]] ; then
      c "$folder"
    else
      echo >&2 "No folder found for *$suff"
      return 1
    fi
    [[ ! -d .git ]] || git status
  done
}

function space() {
  local lines=${LINES}
  local arg="${1:-0}"
  local neg="" div="" mul=""
  case "$arg" in
    \**)
      mul=x
      arg="${arg##\*}"
      ;;
    /-*|/0) return 1 ;;
    -*|/*|0)
      # -3 = clear length minus 3; /3 = clear length/3 ; -/3 = clear 2/3 length
      # blank = full length
      if [[ "$arg" == ?(0|-*) ]] ; then
        neg=x
        arg="${arg##-}"
      fi
      if [[ "$arg" == /* ]] ; then
        div=x
        arg="${arg##/}"
      fi
      ;;
  esac
  if [[ "${arg}" == *[^0-9]* ]] ; then return 1 ; fi
  if [[ -n "$mul" ]] ; then
    lines="$((LINES * arg))"
  else
    [[ -z "$div" ]] || arg="$((LINES / arg))"
    [[ -z "$neg" ]] && lines="$arg" || lines="$((lines - arg))"
  fi
  seq "$lines" | tr -dC \\n
}

# quickly access vimrc.
# If you source another vimrc from this one, do "vimrc 1" to go straight to it.
# "vimrc 2", "vimrc 3", etc to go to the second or third sourced file
function vimrc() {
  local OPTS=()
  local arg n vim=vim src=~/.vimrc
  for arg ; do
    case "$arg" in
      n|nv|nvi|nvim)
        vim=nvim
        src=~/.config/nvim/init.vim
        continue
        ;;
      0|*[^0-9]*)
        n=1
        ;;
      *)
        n="$arg"
        ;;
    esac
    while [[ "$((n--))" -gt 0 ]] ; do
      OPTS+=('+/^source')
    done
    # shellcheck disable=SC2016
    OPTS+=('+normal Wgf')
  done
  "$vim" "$src" "${OPTS[@]}"
}

# quickly access vim help
function :help() {
  vim "+help $1" "+silent only"
}

# venv utilities
function activate() {
  local prg
  prg="$(_condition_venv activate)" && source "$prg"
}

function py() {
  local prg
  prg="$(_find_venv python)" || prg=python3
  "$prg" "$@"
}

function pi() {
  _exec_venv pip "$@"
}

# used by venv utilities above
function _find_venv() {
  for venv in venv .venv ; do
    local prg="${venv}/bin/${1}"
    if [[ -e "$prg" ]] ; then
      echo "$prg"
      return 0
    fi
  done
  return 1
}

function _condition_venv() {
  _find_venv "$1" || {
    echo >&2 venv "$1" not found
    return 1
  }
}

function _exec_venv() {
  local prg
  prg="$(_condition_venv "$1")" || return $?
  shift
  "$prg" "$@"
}

# list functions
function functions() {
  declare -f | sed '/^{ *$/,/^} *$/ d'
}

function hasvim() {
  # shellcheck disable=SC2016
  echo >&2 'WARNING: `hasvim()` is deprecated, use `swapfiles()` instead'
  ! swapfiles "${1:-5}"
}

function swapfiles() {
  _swapfiles verbose "$@"
}

function swapfiles-silent() {
  _swapfiles silent "$@"
}

# look for vim swap files in current file tree
# return 0 if none are found
# return 1 if some are found
# return 125 if arguments not understood
# usage: _swapfiles (silent|verbose) [maxdepth]
function _swapfiles() {
  local silent depth="$2"
  case "$1" in
    silent) silent=x ;;
    verbose) verbose=x ;;
    *) echo >&2 unexpected argument to _swapfiles "$1" ; return 125 ;;
  esac
  local -a swapfiledirmatches
  swapfiledirmatches=(~/.local/share/nvim/swap/"${PWD//\//%}%"*)
  if [[
    -n "$silent" && (
      "${#swapfiledirmatches[@]}" -gt 1 || (
        "${#swapfiledirmatches[@]}" == 1
        && -e "${swapfiledirmatches[0]}"
      )
    )
  ]] ; then return 1 ; fi
  (
    for f in "${swapfiledirmatches[@]}" ; do
      if [[ -e "$f" ]] ; then
        echo "$f"
      fi
    done
    find . ${depth:+-maxdepth "$depth"} -name '[._]*.sw*' -o -name '.sw*'
  ) | {
    local output
    read -rN1 output || return 0
    [[ -n "$output" ]] || return 0
    if [[ -z "$silent" ]] ; then
      printf '%s' "$output"
      cat
    fi
    return 1
  }
}

# create pgrep-like function
if ! check-for-package --optional pgrep ; then
  function pgrep() {
    if [[ "$#" != 1 || -z "$1" ]] ; then
      echo >&2 usage: pgrep process-pattern
      echo >&2 'for more, you should install real pgrep'
      return 1
    elif [[ "$1" == -* ]] ; then
      echo >&2 Options not supported, you should install real pgrep
      return 1
    fi
    # shellcheck disable=SC2009
    ps -ef | grep -q "$1"
  }
  echo >&2 'Consider installing pgrep; we create a shabby ps+grep replacement instead'
fi

# emojis / unicode
function shrug() {
  # ¯\_(ツ)_/¯
  echo $'\uAF\\_(\u30C4)_/\uAF'
}

function _git_warn() {
  echo >&2 WARNING: "$@"
  echo "To bypass this helpful warning, redo your command with 'command git'."
  return 1
}

function _git_check_command() {
  case "$1" in
    reset*--hard*|last*--hard*)
      if ! command git diff --quiet ; then
        _git_warn 'you may be about to clobber extant changes!!!'
      fi
      ;;
    co\ *|checkout\ *|stash\ *|switch\ *|ci\ *|commit\ *|wip\ *)
      local depth configkey=jploginutils.swapfilesdepth
      depth="$(command git config "$configkey")" \
        || _git_warn "checking for swapfiles before executing ${1}; if this is slow, try setting git config jploginutils.swapfilesdepth" \
        || true   # suppress error

      if ! swapfiles ${depth:+"$depth"} ; then
        _git_warn "don't change working tree / index state, you are still editing files"
      fi
      ;;
    clone*\ bam:*)
      # shellcheck disable=SC2016
      _git_warn 'for cloning a bamtech github repo, consider using `git bam`'
      ;;
    'tag -d '*|'tag '*' -d '*)
      ;;
    'tag '*)
      local mainrev
      mainrev="$(command git rev-parse --quiet --verify origin/master)" \
        || mainrev="$(command git rev-parse --quiet --verify origin/main)"
      if [[ "$(command git rev-parse HEAD)" != "$mainrev" ]] || ! command git diff --quiet ; then
        _git_warn "you are tagging a revision that is not the upstream main ($mainrev)"
      fi
      ;;
    *)
      true ;;
  esac
}

function git() {
  # save myself from some dumb mistakes
  if _git_check_command "$*" ; then
    command git "$@"
  else
    false
  fi
}

function helpless() {
  if [[ "$#" -gt 0 ]] ; then
    "$@" --help | less -iR
  else
    echo >&2 run "helpless <command>" to run "<command> --help" through a pager.
  fi
}

function _ack-with-less() {
  local lessopts="${1}"
  shift
  ack --pager="less -R${lessopts:+ }$lessopts" "$@"
}

function ackl() {
  if [[ $# == 0 ]] ; then
    echo >&2 ack with pager
    return
  fi
  _ack-with-less '-FX' "$@"
}

function ackp() {
  if [[ $# == 0 ]] ; then
    echo >&2 ack --passthru with pager, jumping to the first match
    return
  fi
  local lessopt patt
  for patt ; do
    if [[ "$patt" != -* ]] ; then
      lessopt="+/$patt"
      break
    fi
  done
  _ack-with-less "${lessopt}" --passthru "$@"
}

function jql() {
  jq -C "$@" | less -r
}

function pbtee() {
  tee >(pbcopy)
}

function executables() {
  local -a paths
  local path ex
  IFS=: eval 'paths=($PATH)'
  for path in "${paths[@]}" ; do
    [[ -d "$path" ]] || continue
    for ex in "$path"/* ; do
      [[ ! -x "$ex" ]] || echo "$ex"
    done
  done | if [[ $# == 0 ]] ; then cat ; else grep "/$1\$" ; fi
}
