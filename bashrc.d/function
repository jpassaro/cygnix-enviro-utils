#!/bin/bash
# shellcheck disable=SC1090

source_pragma_once ~/bashrc.d/function-rarelyused

function c(){
  local DIR="$1"
  shift
  if [[ ! -d "$DIR" ]] ; then
    mkdir -pv "$DIR" >&2
    local RESULT=$?
    [[ $RESULT == 0 ]] || return $RESULT
  fi
  echo "$DIR" >&2
  if [[ -z "$*" ]] ; then
    cd "$DIR" || return 1  # make shellcheck happy; this should never happen
  else
    ( cd "$DIR" && "$@" )
  fi
}

function code() {
  local suff="$1"
  if [[ -z "$suff" ]] ; then
    if [[ -d ~/code/"${PASSARO_CODE_LOC}" ]] ; then
      c ~/code/"${PASSARO_CODE_LOC}"
      return 0
    else
      local suff="-wc"
    fi
  fi
  local folders=(~/code/*"$suff")
  local numf="${#folders[@]}"
  case "$numf" in
    1) ;;
    *)
        echo >&2 "$numf" folders found for "*$suff", please be more specific:
        for folder in "${folders[@]}" ; do
           printf >&2 '\t%s\n' "$folder"
        done
        return 2 ;;
  esac
  for folder in "${folders[@]}" ; do
    if [[ -d "$folder" ]] ; then
      c "$folder"
    else
      echo >&2 "No folder found for *$suff"
      return 1
    fi
    [[ ! -d .git ]] || git status
  done
}

function space() {
  local lines=${LINES}
  local arg="${1:-0}"
  local neg=""
  local div=""
  [[ -n "$1" && "$arg" != -* ]] || { neg=x ; arg=${arg##-} ; }
  [[ "${arg}" != /* ]] || { div=x ; arg="${arg##/}" ; }
  [[ "${arg}" != *[^0-9]* ]] || return 1 ;
  [[ -z "$div" ]] || arg="$((LINES / arg))"
  [[ -z "$neg" ]] && lines="$arg" || lines="$((lines - arg))"
  seq "$lines" | tr -dC \\n
}

# quickly access vimrc.
# If you source another vimrc from this one, do "vimrc 1" to go straight to it.
# "vimrc 2", "vimrc 3", etc to go to the second or third sourced file
function vimrc() {
  local OPTS=()
  if [[ "$#" != 0 ]] ; then
    local n
    case "$1" in
      0|*[^0-9]*) n=1 ;;
      *)  n="$1" ;;
    esac
    while [[ "$((n--))" -gt 0 ]] ; do
      OPTS=("${OPTS[@]}" '+/^source')
    done
    # shellcheck disable=SC2016
    OPTS=("${OPTS[@]}" '+normal $gf')
  fi
  vim ~/.vimrc "${OPTS[@]}"
}

# quickly access vim help
function :help() {
  vim "+help $1" "+silent only"
}

# venv utilities
function activate() {
  local prg
  prg="$(_condition_venv activate)" && source "$prg"
}

function py() {
  _exec_venv python "$@"
}

function pi() {
  _exec_venv pip "$@"
}

# used by venv utilities above
function _condition_venv() {
  for venv in venv .venv ; do
    local prg="${venv}/bin/${1}"
    if [[ -e "$prg" ]] ; then
      echo "$prg"
      return 0
    fi
  done
  echo >&2 venv "$1" not found
  return 1
}

function _exec_venv() {
  local prg result
  prg="$(_condition_venv "$1")"
  result="$?"
  if [[ "$result" == 0 ]] ; then
    shift
    "$prg" "$@"
  fi
  return "$result"
}

# iterm2 extension functions
if [[ -n "$ITERM_SHELL_INTEGRATION_INSTALLED" ]] ; then
  source_pragma_once ~/bashrc.d/iterm-extensions
fi

# list functions
function functions() {
  declare -f | sed '/^{ *$/,/^} *$/ d'
}

# progress log!
source_pragma_once ~/bashrc.d/progress-log

# look for vim swap files in current file tree
function hasvim() {
  find . -maxdepth "${1:-5}" -name '[._]*.sw*' -o -name '.sw*'
}

# create pgrep-like function
if ! check-for-package --optional pgrep ; then
  function pgrep() {
    if [[ "$#" != 1 || -z "$1" ]] ; then
      echo >&2 usage: pgrep process-pattern
      echo >&2 'for more, you should install real pgrep'
      return 1
    elif [[ "$1" == -* ]] ; then
      echo >&2 Options not supported, you should install real pgrep
      return 1
    fi
    # shellcheck disable=SC2009
    ps -ef | grep -q "$1"
  }
  echo >&2 'Consider installing pgrep; we create a shabby ps+grep replacement instead'
fi

# emojis / unicode
function shrug() {
  # ¯\_(ツ)_/¯
  echo $'\uAF\\_(\u30C4)_/\uAF'
}
