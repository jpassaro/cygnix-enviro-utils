#!/bin/bash

function addhost(){
    for x in "$@" ; do
      echo adding $x
      sed "s/%HOST%/$x/" ~/.ssh/config_template >>~/.ssh/config
    done
}

# obselete
function cdsrc() {
  local envi="$1" ; shift
  c "$SRC/${envi}/projects" "$@"
  return $?
}


function c(){
  local DIR="$1"
  shift
  if [[ ! -d "$DIR" ]] ; then
    mkdir -pv "$DIR" >&2
    local RESULT=$?
    [[ $RESULT == 0 ]] || return $RESULT
  fi
  echo "$DIR" >&2
  if [[ -z "$*" ]] ; then
    cd "$DIR"
  else
    ( cd "$DIR" && "$@" )
  fi
}

# Mac-only
# TODO create conditional on mac
function ppid() {
  local PID=$$ ; ps -p $(cat /proc/$PID/ppid)
}

function create_alias() {
  for x ; do
    echo alias "'$x'" >>~/bashrc.d/alias
    source ~/bashrc.d/alias
  done
}

function code() {
  local suff="$1"
  if [[ -z "$suff" ]] ; then
    if [[ -d ~/code/"${PASSARO_CODE_LOC}" ]] ; then
      c ~/code/"${PASSARO_CODE_LOC}"
      return 0
    else
      local suff="-wc"
    fi
  fi
  local folders=(~/code/*"$suff")
  local numf="${#folders[@]}"
  case "$numf" in
    1) ;;
    *)
        echo >/dev/tty "$numf" folders found for \*"$suff", please be more specific:
	for folder in "${folders[@]}" ; do
           echo >/dev/tty -e "\\t$folder"
        done
	return 2 ;;
  esac
  for folder in "${folders[@]}" ; do
    [[ -d "$folder" ]] && c "$folder" || \
         { echo >/dev/tty 'No folder found for *'"$suff" ; return 1 ;}
    [[ ! -d .git ]] || git status
  done
}

function space() {
  local lines=${LINES}
  local arg="${1:-0}"
  local neg=""
  local div=""
  [[ -n "$1" && "$arg" != -* ]] || { neg=x ; arg=${arg##-} ; }
  [[ "${arg}" != /* ]] || { div=x ; arg="${arg##/}" ; }
  [[ "${arg}" != *[^0-9]* ]] || return 1 ;
  [[ -z "$div" ]] || arg="$((LINES / arg))"
  [[ -z "$neg" ]] && lines="$arg" || lines="$((lines - ${arg}))"
  seq "$lines" | tr -dC \\n
}

# quickly access vimrc.
# If you source another vimrc from this one, do "vimrc 1" to go straight to it.
# "vimrc 2", "vimrc 3", etc to go to the second or third sourced file
function vimrc() {
  local OPTS=()
  if [[ "$#" != 0 ]] ; then
    local n
    case "$1" in
      0|*[^0-9]*) n=1 ;;
      *)  n="$1" ;;
    esac
    while [[ "$((n--))" > 0 ]] ; do
      OPTS=("${OPTS[@]}" '+/^source')
    done
    OPTS=("${OPTS[@]}" '+normal $gf')
  fi
  vim ~/.vimrc "${OPTS[@]}"
}

# quickly access vim help
function :help() {
  vim "+help $1" "+silent only"
}

function _condition_venv() {
  for venv in venv .venv ; do
    local prg="${venv}/bin/${1}"
    if [[ -e "$prg" ]] ; then
      echo "$prg"
      return 0
    fi
  done
  echo >&2 venv "$1" not found
  return 1
}

function _exec_venv() {
  local prg="$(_condition_venv "$1")"
  local result="$?"
  if [[ "$result" == 0 ]] ; then
    shift
    "$prg" "$@"
  fi
  return "$result"
}

function py() {
  _exec_venv python "$@"
}

function pi() {
  _exec_venv pip "$@"
}

function loggit() {
  if [[ -n "$(set +o | fgrep 'set +o pipefail')" ]] ; then
    function loggit__exit() {
      trap - RETURN
      unset -f loggit__exit
      set +o pipefail
    }
    trap loggit__exit RETURN
    set -o pipefail
  fi
  name="$1"
  shift
  "$@" 2>&1 | tee /tmp/log-"${name}-$(gdate --iso=seconds | sed 's/-[^-]*$//;y/T:/_-/').log"
}

function logname() {
  local prefix=
  local num=
  while [[ -n "$1" ]] ; do
    local arg="$1"
    if [[ "$arg" =~ ^[1-9][0-9]*$ ]] ; then
      if [[ -z "$num" ]] ; then
        num="$arg"
      else
        echo "two numbers provided" >&2
        return 1
      fi
    elif [[ -z "$prefix" && -n "$arg" ]] ; then
      prefix="$arg"
    else
      echo "bad input" >&2
      return 1
    fi
    shift
  done
  if [[ -z "$num" ]] ; then
    num=1
  fi
  local pattern=/tmp/log
  if [[ -n "$prefix" ]] ; then
    pattern="${pattern}-${prefix}"
  fi
  ls -t "${pattern}"-* | sed -n "${num}p"
}

function lesslog() {
  local lname="$(logname "$@")"
  local rv="$?"
  if [[ "$rv" != 0 ]] ; then
    return "$rv"
  fi
  less "$lname"
}

function activate() {
  local prg="$(_condition_venv activate)" && source "$prg"
}

function bring() {
  mv -v "$@" .
}

# likely mac-only and very possibly iterm2-only. TODO verify that, check for
# it before defining the function
function remind() {
  sleeptime="${1:?usage: remind SLEEPTIME message text}"
  (
    sleep "$sleeptime"
    shift
    echo -ne '\e]9;'"$*"'\007'
  ) &
}

# list functions
function functions() {
  declare -f | sed '/^{ *$/,/^} *$/ d'
}

# look for vim swap files in current file tree
function hasvim() {
  find . -maxdepth ${1:-5} -name '[._]*.sw*' -o -name .sw*
}
